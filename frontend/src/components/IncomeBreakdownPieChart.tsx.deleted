import React from 'react';
import {
  PieChart as RechartsPieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
} from 'recharts';
import { getCategoryColor, formatCurrency, formatPercentage } from '@/utils/styleUtils';

interface IncomeAccount {
  name: string;
  value: number;
  category?: string; // Optional, but good for consistency if used elsewhere
}

interface IncomeBreakdownPieChartProps {
  data: IncomeAccount[];
  title: string;
}

interface ChartDataPoint {
  name: string; // For the pie chart, this will be the income source name
  value: number;
  percentage?: number;
  color?: string;
}

// Custom Tooltip
const CustomTooltip = ({ active, payload }: any) => {
  if (active && payload && payload.length) {
    const data = payload[0].payload as ChartDataPoint;
    return (
      <div className="bg-white p-3 border border-gray-300 shadow-lg rounded-md">
        <p className="text-sm font-semibold text-gray-700">{`${data.name}`}</p>
        <p className="text-sm text-gray-600">
          {`Value: ${formatCurrency(data.value)}`}
          {data.percentage !== undefined && ` (${data.percentage.toFixed(1)}%)`}
        </p>
      </div>
    );
  }
  return null;
};

// Custom Legend - using text-base for font size
const CustomLegend = (props: any) => {
  const { payload } = props;

  if (!payload || payload.length === 0) {
    return null;
  }

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-2 pl-4 w-full mt-4">
      {payload.map((entry: any, index: number) => (
        <div key={`item-${index}`} className="flex items-center justify-between">
          <div className="flex items-center whitespace-nowrap overflow-hidden text-ellipsis min-w-0">
            <div
              className="w-3 h-3 mr-2 rounded-sm flex-shrink-0"
              style={{ backgroundColor: entry.color }}
            />
            <span className="text-base font-medium text-gray-700 truncate">
              {entry.value} {/* This is the income source name from Recharts payload */}
            </span>
          </div>
          <span className="ml-3 text-base font-medium text-gray-800 flex-shrink-0">
            {entry.payload && typeof entry.payload.percentage === 'number'
              ? `${entry.payload.percentage.toFixed(1)}%`
              : formatPercentage(0)}
          </span>
        </div>
      ))}
    </div>
  );
};

const IncomeBreakdownPieChart: React.FC<IncomeBreakdownPieChartProps> = ({ data: initialData, title }) => {
  // Sort data by value in descending order and take top 6 or all if less than 6
  const sortedData = [...initialData].sort((a, b) => b.value - a.value);
  const topData = sortedData.slice(0, 6);

  const totalValue = topData.reduce((sum, item) => sum + item.value, 0);

  const chartData: ChartDataPoint[] = topData.map((item, index) => ({
    name: item.name, // Use account name for the chart
    value: item.value,
    percentage: totalValue > 0 ? (item.value / totalValue) * 100 : 0,
    color: getCategoryColor(item.name, index), // Use item.name for color consistency or a fixed color list
  }));

  const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {
    const RADIAN = Math.PI / 180;
    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
    const x = cx + radius * Math.cos(-midAngle * RADIAN);
    const y = cy + radius * Math.sin(-midAngle * RADIAN);

    return percent > 0.05 ? (
      <text
        x={x}
        y={y}
        fill="white"
        textAnchor={x > cx ? 'start' : 'end'}
        dominantBaseline="central"
        fontSize={12}
        fontWeight="bold"
      >
        {`${(percent * 100).toFixed(0)}%`}
      </text>
    ) : null;
  };

  if (!chartData || chartData.length === 0) {
    return (
      <div className="w-full">
        <h3 className="text-lg font-semibold text-gray-800 mb-4">{title}</h3>
        <div className="h-64 md:h-72 lg:h-80 w-full min-h-[300px] flex flex-col items-center justify-center">
          <p className="text-gray-500">No income data available to display.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full bg-white p-4 rounded-lg shadow">
      <h3 className="text-xl font-semibold text-gray-800 mb-6 text-center">{title}</h3>
      <div className="h-[300px] md:h-[350px] w-full">
        <ResponsiveContainer width="100%" height="100%">
          <RechartsPieChart>
            <Pie
              data={chartData}
              cx="50%"
              cy="50%"
              labelLine={false}
              label={renderCustomizedLabel}
              outerRadius="80%"
              innerRadius="40%" // Doughnut chart style
              fill="#8884d8"
              dataKey="value"
              nameKey="name" // Use 'name' which holds income source name
            >
              {chartData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={entry.color} />
              ))}
            </Pie>
            <Tooltip content={<CustomTooltip />} />
            {/* Use the custom legend component */}
            <Legend content={<CustomLegend />} verticalAlign="bottom" align="center" />
          </RechartsPieChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

export default IncomeBreakdownPieChart;
